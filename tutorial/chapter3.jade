.step(data-title="Validate the Data", data-file='app/controllers/twilio_controller.rb', data-highlight="20-27")
  :markdown
    ## Validating the User Data

    Before our controller can make a phone call we need to check that the data it is receiving is valid. In our case we want to make sure that a valid _Phone Number_ is present. The easiest way to do this in Rails is to create a Model from the data and then validate that model. Let's quickly take a look at what this looks like.

    ```
    # Simple model to handle validation
    class Contact
        include ActiveModel::Validations
        attr_accessor :phone
        validates_presence_of :phone
        validates :phone, :phony_plausible => true
    end
    ```

    Creating a **Contact** model allows us to validate the phone number using the [Phony][phony] gem. Additionally this sort of workflow will scale nicely if you decide to store these Contacts in a database.

    Now all we need to do to validate the model is call .valid? on the object. Once we've got an all clear we can make a phone call.

    [phony]: https://github.com/joost/phony_rails


.step(data-title='Making a Phone Call', data-file='app/controllers/twilio_controller.rb', data-highlight="28-38")
  :markdown
    ## Making a phone call
    Making a phone call using Twilio in rails is very easy. 

    First we initiate a @client object with our Account SID and Auth Token. This is essentially our rubyfied REST API handler, which we could use to send SMS, generate TwiML or a myriad of other things. But for now we just need to create a phone call.

    Next we'll use the REST API to [make an outgoing phone call][voice] which requires we pass it a From number, To number and the [URL Parameter][url] that tells Twilio what to do after it connects the call to our user. In this case Twilio needs to dial in the Agent once the call has been placed. We'll discuss this more in the next step.

    Assuming we have succesfully connected our user to our agent, we need to send a response to the browser telling it that all went well. This is the message that our ajax handler was expecting.

    [voice]: /docs/api/rest/making-calls
    [url]: /docs/api/rest/making-calls#url-parameter

.step(data-title='Generating TwiML', data-file='app/controllers/twilio_controller.rb', data-highlight='52-62')
  :markdown
    ## Generating TwiML
    TwiML is a set of [simple verbs][verbs], written in XML, that Twilio reads as instructions. In this case our instructions inform Twilio to simply SAY something to the user and then DIAL in an agent. 

    In order to make writing TwiML as easy as possible, many of the helper libraries have methods that generate TwiML for you. In this case we use twilio-ruby to create a TwiML response that will say something and then Dial in the agent. 

    [verbs]: /docs/api/twiml#verbs
    [url]: /docs/api/rest/making-calls#url-parameter

.step(data-title='Add Routes', data-file="config/routes.rb")
  :markdown
    ## Create the Routes
    Before we run our rails app, we should probably create some routes. Since both of our custom functions are expecting HTTP POST requests, be sure to define them as so in the routes file.


.step(data-title='Where to Next?')
    :markdown
      ## Where to next?

      That's it! We've just implemented click to call that allow your customers to connect with a
      support agent.

      If you're a Rails developer working with Twilio you might enjoy these
      other tutorials:

      [**Automated Survey**](//www.twilio.com/docs/tutorials/walkthrough/automated-survey/ruby/rails)

      Instantly collect structured data from your users with a survey
      conducted over a voice call or SMS text messages. Learn how to create
      your own survey in Java.

      [**SMS and MMS Notifications**](//www.twilio.com/docs/tutorials/walkthrough/server-notifications/ruby/rails)

      Send SMS alerts to a list of system administrators if something goes wrong on your server.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it. Send a message <deved-oss@twilio.com>
      to let us know what you think.
